#!/user/bin/bash

#change color to blue before printing
# Color variables
BOLD="\033[1m"
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'
# Clear the color after that
clear='\033[0m'
# Background Color variables
bg_red='\033[0;41m'
bg_green='\033[0;42m'
bg_yellow='\033[0;43m'
bg_blue='\033[0;44m'
bg_magenta='\033[0;45m'
bg_cyan='\033[0;46m'

declare arr_Type
declare arr_column
#------------------------------------------------------------------------------------------------
#Insert_Function 
#------------------------------------------------------------------------------------------------
Update_Func ()
{
     
    if [[  $1 == \0 ]]; then 

        echo -e "${red}[ Error ] --- Can't Read Value You Entered --- ${clear}"
        Back_To_Menu

    elif [[ `ls | grep -i "^$1.data$"` == "" && `ls | grep -i "^$1.meta$"` == ""  ]];then
        
        echo -e "${red}\n[ Error ] --- Table Name Not Exist --- ${clear}" 
        Back_To_Menu  

    else 
        echo -e "${green}*------------------------------------- * Update Table * --------------------------------* \n${clear}"

        Update_Values_Func $1

    fi
}

#------------------------------------------------------------------------------------------------
#Back_To_Menu_Function 
#------------------------------------------------------------------------------------------------
Back_To_Menu ()
{
        echo -e "${green}*-------------------------------------- * Select Menu * ------------------------------------*${clear}"

        select Menu in  "Insert Table Name Again" "Exit"
        do
            case $Menu in
                "Insert Table Name Again")
                    read -p "Enter Table Name : " Table_Name
                    Update_Func $Table_Name 
                    break
                    ;;
                "Exit")
                    echo  "Exit"
                    break
                    ;;
                    *)
                    echo -e "${red}[ Error ] --- Enter Valid Number Please --- ${clear}" 
                    Back_To_Menu
                    ;;
            esac

        done
        
}

#------------------------------------------------------------------------------------------------
#Update_Menu_Function 
#------------------------------------------------------------------------------------------------
Update_Menu ()
{
    echo -e "${green}*-------------------------------------- * Update Menu * ------------------------------------*${clear}"

    select item in "Update Full User Data" "Update Specific Value" "Exit"
        do
            case $item in 
                "Update Full User Data")
                    Update_Full_Data_Func
                    ;;
                "Update Specific Value")
                    echo "Update Specific Value"
                    ;;
                "Exit")
                    echo " Exit"
                    break
                    ;;
                *)
                echo -e "${red}[ Error ] --- Enter Valid Number Please --- ${clear}" 
                Update_Menu
            esac
        done

        
}

#------------------------------------------------------------------------------------------------
#Update_Values_Func
#-----------------------------------------------------------------------------------------------

Update_Full_Data_Func ()
{
    read -p "Insert your ${arr_column[0]} " PK
    sed 

    for ((i=1;i<${#arr_column[@]};i++));
    do
        coll=${arr_column[$i]}
        echo $coll
        read -p "Insert New Value Of $coll "
        new_val_arr+=("$i")

    done
    echo "${new_val_arr[@]}"


}

#------------------------------------------------------------------------------------------------
#Update_Values_Func
#-----------------------------------------------------------------------------------------------

Update_Values_Func ()
{
    declare val
    declare line
    echo -e "${green}*------------------------------------- * Cloumn Name * ----------------------------------*${clear}"

    for j in `awk -F " " '{print $1}' "$1.meta"` 
    do 
        arr_column+=("$j")
    done
    for j in `awk -F " " '{print $2}' "$1.meta"` 
    do 
        arr_Type+=("$j")
    done

    column -t -s " " -o " --> " "$1.meta"
    echo -e "${green}*-----------------------------------------------------------------------------------------*${clear}"
    #calling Function to select what type of update
    Update_Menu


}




read -p "Insert Table Name: " Name 
Update_Func $Name